// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int @id @default(autoincrement())
  name      String @db.VarChar(80)
  email     String @db.VarChar(80) @unique
  password  String
  senders   Message[] @relation("SendersMessages")
  receivers Message[] @relation("ReceiversMessages")
  ong       Ong?      
  createdAt DateTime @default(now())

  @@map("users")
}

model State {
  id        Int @id @default(autoincrement())
  name      String
  cities    City[]
  createdAt DateTime @default(now())

  @@map("states")
}

model City {
  id        Int @id @default(autoincrement())
  name      String
  state     State @relation(fields: [stateId], references: [id])
  stateId   Int
  addresses Address[]
  createdAt DateTime @default(now())

  @@map("cities")
}

model Address {
  id            Int @id @default(autoincrement())
  street        String
  neighborhood  String
  number        String
  complement    String?
  zipCode       String
  city          City @relation(fields: [cityId], references: [id])
  cityId        Int
  ongs          Ong[]
  createdAt     DateTime @default(now())

  @@map("addresses")
}

model ActingArea {
  id        Int @id @default(autoincrement())
  name      String @unique
  ongs      Ong[]
  createdAt DateTime @default(now())

  @@map("actingAreas")
}

model Ong {
  id           Int @id @default(autoincrement())
  name         String @unique
  user         User @relation(fields: [userId], references: [id]) 
  userId       Int @unique  
  address      Address @relation(fields: [addressId], references: [id])  
  addressId    Int
  actingArea   ActingArea @relation(fields: [actingAreaId], references: [id])
  actingAreaId Int
  description  String?
  phones       Phone[] 
  socialMedias SocialMedia[] 
  donationNeedsOngs DonationNeedOng[] 
  createdAt DateTime @default(now())

  @@map("ongs")
}

model Phone {
  id           Int @id @default(autoincrement())
  number       String @unique
  description  String?
  ong          Ong @relation(fields: [ongId], references: [id])
  ongId        Int  
  createdAt    DateTime @default(now())

  @@map("phones")
}

model SocialMedia {
  id        Int @id @default(autoincrement())
  address   String  @unique
  ong       Ong @relation(fields: [ongId], references: [id])  
  ongId     Int
  createdAt DateTime @default(now())

  @@map("socialMedias")
}

model DonationNeed {
  id        Int @id @default(autoincrement())
  name      String @unique
  donationNeedsOngs DonationNeedOng[]
  createdAt DateTime @default(now())

  @@map("donationNeeds")
}

model DonationNeedOng {
  id             Int @id @default(autoincrement())
  ong            Ong @relation(fields: [ongId], references: [id])
  ongId          Int
  donationNeed   DonationNeed @relation(fields: [donationNeedId], references: [id]) 
  donationNeedId Int
  createdAt      DateTime @default(now())

  @@map("donationNeedsOngs")
}

model Message {
  id          Int @id @default(autoincrement())
  sender      User @relation("SendersMessages", fields: [senderId], references: [id])
  senderId    Int
  receiver    User @relation("ReceiversMessages", fields: [receiverId], references: [id])
  receiverId  Int
  message     String  
  createdAt   DateTime @default(now())

  @@map("messages")
}